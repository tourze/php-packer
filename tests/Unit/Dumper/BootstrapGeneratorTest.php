<?php

declare(strict_types=1);

namespace PhpPacker\Tests\Unit\Dumper;

use PhpPacker\Dumper\BootstrapGenerator;
use PhpPacker\Storage\SqliteStorage;
use PHPUnit\Framework\TestCase;
use Psr\Log\LoggerInterface;

class BootstrapGeneratorTest extends TestCase
{
    private BootstrapGenerator $generator;
    private SqliteStorage $storage;
    private LoggerInterface $logger;
    private string $dbPath;

    public function testGenerateBasicBootstrap(): void
    {
        $files = $this->createTestFiles();
        $bootstrap = $this->generator->generate($files, 'index.php');

        // Check header
        $this->assertStringContainsString('<?php', $bootstrap);
        $this->assertStringContainsString('Generated by php-packer', $bootstrap);
        $this->assertStringContainsString('declare(strict_types=1);', $bootstrap);

        // Check error handler
        $this->assertStringContainsString('set_error_handler', $bootstrap);
        $this->assertStringContainsString('ErrorException', $bootstrap);

        // Check autoloader
        $this->assertStringContainsString('spl_autoload_register', $bootstrap);
        $this->assertStringContainsString('$GLOBALS[\'__PACKED_AUTOLOADER\']', $bootstrap);

        // Check packed marker
        $this->assertStringContainsString('define(\'__PACKED__\', true)', $bootstrap);
        $this->assertStringContainsString('$GLOBALS[\'__PACKED_FILES\'] = []', $bootstrap);
    }

    private function createTestFiles(): array
    {
        $file1 = $this->storage->addFile('file1.php', '<?php class A {}');
        $file2 = $this->storage->addFile('file2.php', '<?php class B {}');

        return [
            ['id' => $file1, 'path' => 'file1.php'],
            ['id' => $file2, 'path' => 'file2.php']
        ];
    }

    public function testGenerateWithConfig(): void
    {
        $config = [
            'version' => '2.0.0',
            'runtime' => [
                'error_reporting' => 'E_ALL & ~E_NOTICE',
                'memory_limit' => '512M',
                'timezone' => 'Europe/Berlin'
            ]
        ];

        $generator = new BootstrapGenerator($this->storage, $this->logger, $config);
        $bootstrap = $generator->generate([], 'index.php');

        // Check version
        $this->assertStringContainsString('Version: 2.0.0', $bootstrap);

        // Check runtime config
        $this->assertStringContainsString('error_reporting(E_ALL & ~E_NOTICE)', $bootstrap);
        $this->assertStringContainsString("ini_set('memory_limit', '512M')", $bootstrap);
        $this->assertStringContainsString("date_default_timezone_set('Europe/Berlin')", $bootstrap);
    }

    public function testGenerateClassMap(): void
    {
        // Create files with symbols
        $file1Id = $this->storage->addFile('src/ClassA.php', '<?php');
        $this->storage->addSymbol($file1Id, 'class', 'ClassA', 'App\\ClassA', 'App');

        $file2Id = $this->storage->addFile('src/ClassB.php', '<?php');
        $this->storage->addSymbol($file2Id, 'class', 'ClassB', 'App\\ClassB', 'App');
        $this->storage->addSymbol($file2Id, 'interface', 'InterfaceB', 'App\\InterfaceB', 'App');

        $file3Id = $this->storage->addFile('src/Trait.php', '<?php');
        $this->storage->addSymbol($file3Id, 'trait', 'TraitC', 'App\\TraitC', 'App');

        $files = [
            ['id' => $file1Id, 'path' => 'src/ClassA.php'],
            ['id' => $file2Id, 'path' => 'src/ClassB.php'],
            ['id' => $file3Id, 'path' => 'src/Trait.php']
        ];

        $bootstrap = $this->generator->generate($files, 'index.php');

        // Check classmap contains all symbols
        $this->assertStringContainsString('"App\\\\ClassA": "__PACKED_OFFSET__0"', $bootstrap);
        $this->assertStringContainsString('"App\\\\ClassB": "__PACKED_OFFSET__1"', $bootstrap);
        $this->assertStringContainsString('"App\\\\InterfaceB": "__PACKED_OFFSET__1"', $bootstrap);
        $this->assertStringContainsString('"App\\\\TraitC": "__PACKED_OFFSET__2"', $bootstrap);
    }

    public function testGenerateAutoloaderLogic(): void
    {
        $bootstrap = $this->generator->generate([], 'index.php');

        // Check autoloader implementation
        $this->assertStringContainsString('ltrim($class, \'\\\\\')', $bootstrap);
        $this->assertStringContainsString('if (isset($classMap[$class]))', $bootstrap);
        $this->assertStringContainsString('strpos($file, \'__PACKED_OFFSET__\')', $bootstrap);
        $this->assertStringContainsString('eval($GLOBALS[\'__PACKED_FILES\'][$offset])', $bootstrap);
        $this->assertStringContainsString('return true;', $bootstrap);
        $this->assertStringContainsString('return false;', $bootstrap);
    }

    public function testGenerateEntryPoint(): void
    {
        $entryPoint = $this->generator->generateEntryPoint('index.php');

        $this->assertStringContainsString('// Entry point', $entryPoint);
        $this->assertStringContainsString('(function() {', $entryPoint);
        $this->assertStringContainsString("require_once '__PACKED_ENTRY__';", $entryPoint);
        $this->assertStringContainsString('})();', $entryPoint);
        $this->assertStringContainsString('}', $entryPoint); // Closing namespace brace
    }

    public function testEmptyFilesGeneration(): void
    {
        $bootstrap = $this->generator->generate([], 'index.php');

        // Should still generate valid bootstrap
        $this->assertStringContainsString('<?php', $bootstrap);
        $this->assertStringContainsString('static $classMap = []', $bootstrap);
    }

    public function testNamespaceWrapper(): void
    {
        $bootstrap = $this->generator->generate([], 'index.php');

        // Check namespace wrapper
        $this->assertStringContainsString('namespace {', $bootstrap);
        $this->assertMatchesRegularExpression('/namespace\s*\{/', $bootstrap);
    }

    public function testDefaultConfiguration(): void
    {
        $bootstrap = $this->generator->generate([], 'index.php');

        // Check defaults
        $this->assertStringContainsString('error_reporting(E_ALL)', $bootstrap);
        $this->assertStringContainsString("ini_set('memory_limit', '256M')", $bootstrap);
        $this->assertStringContainsString("date_default_timezone_set('UTC')", $bootstrap);
    }

    public function testComplexClassMap(): void
    {
        // Create file with multiple namespaces
        $fileId = $this->storage->addFile('complex.php', '<?php');

        // Add symbols from different namespaces
        $this->storage->addSymbol($fileId, 'class', 'Class1', 'Root\\Class1', 'Root');
        $this->storage->addSymbol($fileId, 'class', 'Class2', 'Root\\Sub\\Class2', 'Root\\Sub');
        $this->storage->addSymbol($fileId, 'interface', 'IFace', 'Root\\Sub\\Deep\\IFace', 'Root\\Sub\\Deep');

        // Global namespace class
        $this->storage->addSymbol($fileId, 'class', 'GlobalClass', 'GlobalClass', null);

        $files = [['id' => $fileId, 'path' => 'complex.php']];
        $bootstrap = $this->generator->generate($files, 'index.php');

        // All classes should map to same file offset
        $this->assertStringContainsString('"Root\\\\Class1": "__PACKED_OFFSET__0"', $bootstrap);
        $this->assertStringContainsString('"Root\\\\Sub\\\\Class2": "__PACKED_OFFSET__0"', $bootstrap);
        $this->assertStringContainsString('"Root\\\\Sub\\\\Deep\\\\IFace": "__PACKED_OFFSET__0"', $bootstrap);
        $this->assertStringContainsString('"GlobalClass": "__PACKED_OFFSET__0"', $bootstrap);
    }

    public function testBootstrapStructure(): void
    {
        $bootstrap = $this->generator->generate([], 'index.php');

        // Verify proper PHP structure
        $this->assertStringStartsWith('<?php', $bootstrap);

        // Check for required sections in order
        $sections = [
            'Generated by php-packer',
            'declare(strict_types=1)',
            'namespace {',
            'Error handling setup',
            'Autoloader',
            'Environment setup',
            'Packed marker',
            '__PACKED_FILES'
        ];

        $lastPos = 0;
        foreach ($sections as $section) {
            $pos = strpos($bootstrap, $section);
            $this->assertNotFalse($pos, "Section '$section' not found");
            $this->assertGreaterThan($lastPos, $pos, "Section '$section' is out of order");
            $lastPos = $pos;
        }
    }

    protected function setUp(): void
    {
        $this->dbPath = sys_get_temp_dir() . '/php-packer-test-' . uniqid() . '.db';
        $this->logger = $this->createMock(LoggerInterface::class);
        $this->storage = new SqliteStorage($this->dbPath, $this->logger);
        $this->generator = new BootstrapGenerator($this->storage, $this->logger);
    }

    protected function tearDown(): void
    {
        if (file_exists($this->dbPath)) {
            unlink($this->dbPath);
        }
    }
}
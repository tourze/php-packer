<?php

declare(strict_types=1);

namespace PhpPacker\Tests\Unit\Dumper;

use PhpPacker\Dumper\BootstrapGenerator;
use PhpPacker\Dumper\CodeDumper;
use PhpPacker\Storage\SqliteStorage;
use PHPUnit\Framework\TestCase;
use Psr\Log\LoggerInterface;

class CodeDumperTest extends TestCase
{
    private CodeDumper $dumper;
    private SqliteStorage $storage;
    private BootstrapGenerator $bootstrapGenerator;
    private LoggerInterface $logger;
    private string $dbPath;
    private string $outputPath;

    public function testDumpSimpleFiles(): void
    {
        $files = [
            [
                'id' => 1,
                'path' => 'file1.php',
                'content' => '<?php echo "Hello";',
                'is_entry' => false
            ],
            [
                'id' => 2,
                'path' => 'index.php',
                'content' => '<?php require "file1.php";',
                'is_entry' => true
            ]
        ];

        $this->dumper->dump($files, 'index.php', $this->outputPath);

        $this->assertFileExists($this->outputPath);

        $content = file_get_contents($this->outputPath);

        // Check bootstrap is included
        $this->assertStringContainsString('Generated by php-packer', $content);

        // Check files are packed
        $this->assertStringContainsString('$GLOBALS[\'__PACKED_FILES\'][0]', $content);
        $this->assertStringContainsString('$GLOBALS[\'__PACKED_FILES\'][1]', $content);

        // Check entry point
        $this->assertStringContainsString('eval($GLOBALS[\'__PACKED_FILES\'][1])', $content);
    }

    public function testRemovePhpTags(): void
    {
        $files = [
            [
                'id' => 1,
                'path' => 'test.php',
                'content' => "<?php\n\necho 'test';\n\n?>",
                'is_entry' => true
            ]
        ];

        $this->dumper->dump($files, 'test.php', $this->outputPath);

        $content = file_get_contents($this->outputPath);

        // PHP tags should be removed from packed content
        $this->assertStringContainsString("echo 'test';", $content);
        $this->assertStringNotContainsString("<?php\n\necho", $content);
        $this->assertStringNotContainsString("?>\n__PACKED_EOF__", $content);
    }

    public function testRemoveComments(): void
    {
        $config = ['optimization' => ['remove_comments' => true]];
        $dumper = new CodeDumper(
            $this->storage,
            $this->logger,
            $this->bootstrapGenerator,
            $config
        );

        $files = [
            [
                'id' => 1,
                'path' => 'test.php',
                'content' => '<?php
// Single line comment
echo "test";
/* Multi line
   comment */
/** 
 * Doc comment
 * @param string $test
 */
function test($test) {
    // Another comment
    return $test; // inline comment
}',
                'is_entry' => true
            ]
        ];

        $dumper->dump($files, 'test.php', $this->outputPath);

        $content = file_get_contents($this->outputPath);

        // Regular comments should be removed
        $this->assertStringNotContainsString('// Single line comment', $content);
        $this->assertStringNotContainsString('// Another comment', $content);
        $this->assertStringNotContainsString('/* Multi line', $content);

        // Doc comments should be preserved
        $this->assertStringContainsString('* @param string $test', $content);

        // Code should remain
        $this->assertStringContainsString('echo "test"', $content);
        $this->assertStringContainsString('function test($test)', $content);
    }

    public function testNamespaceProcessing(): void
    {
        $files = [
            [
                'id' => 1,
                'path' => 'namespaced.php',
                'content' => '<?php
namespace App\Controller;

use App\Service\UserService;

class HomeController
{
    private UserService $service;
}',
                'is_entry' => false
            ],
            [
                'id' => 2,
                'path' => 'global.php',
                'content' => '<?php
// No namespace
class GlobalClass {}',
                'is_entry' => true
            ]
        ];

        $this->dumper->dump($files, 'global.php', $this->outputPath);

        $content = file_get_contents($this->outputPath);

        // Namespaced file should be wrapped
        $this->assertStringContainsString('namespace App\Controller {', $content);
        $this->assertMatchesRegularExpression('/namespace App\\\\Controller \{[^}]+\}/', $content);

        // Global file should not have namespace wrapper
        $this->assertStringContainsString('class GlobalClass', $content);
    }

    public function testEscapeFileContent(): void
    {
        $files = [
            [
                'id' => 1,
                'path' => 'test.php',
                'content' => '<?php
$var = "test string with $variable and \"quotes\"";
$heredoc = <<<EOT
Heredoc with $var
EOT;
echo \'Single quotes\';
',
                'is_entry' => true
            ]
        ];

        $this->dumper->dump($files, 'test.php', $this->outputPath);

        $content = file_get_contents($this->outputPath);

        // Since we use nowdoc, content is not escaped
        $this->assertStringContainsString('$var = "test string with $variable', $content);
        $this->assertStringContainsString('and \"quotes\"', $content);
        $this->assertStringContainsString('$heredoc = <<<EOT', $content);
    }

    public function testMinimizeWhitespace(): void
    {
        $config = ['optimization' => ['remove_whitespace' => true]];
        $dumper = new CodeDumper(
            $this->storage,
            $this->logger,
            $this->bootstrapGenerator,
            $config
        );

        $files = [
            [
                'id' => 1,
                'path' => 'test.php',
                'content' => '<?php
    class    Test    {
        public    function    method   (   )   {
            return    "test"   ;
        }
    }',
                'is_entry' => true
            ]
        ];

        $dumper->dump($files, 'test.php', $this->outputPath);

        $content = file_get_contents($this->outputPath);

        // Extra whitespace should be minimized
        $this->assertStringContainsString('class Test{', $content);
        $this->assertStringContainsString('public function method(){', $content);
        $this->assertStringContainsString('return "test";', $content);
    }

    public function testMultipleFiles(): void
    {
        $files = [];
        for ($i = 0; $i < 5; $i++) {
            $files[] = [
                'id' => $i + 1,
                'path' => "file$i.php",
                'content' => "<?php\necho 'File $i';",
                'is_entry' => $i === 4
            ];
        }

        $this->dumper->dump($files, 'file4.php', $this->outputPath);

        $content = file_get_contents($this->outputPath);

        // All files should be packed
        for ($i = 0; $i < 5; $i++) {
            $this->assertStringContainsString("\$GLOBALS['__PACKED_FILES'][$i]", $content);
            $this->assertStringContainsString("echo 'File $i'", $content);
        }

        // Entry point should execute file4 (index 4)
        $this->assertStringContainsString('eval($GLOBALS[\'__PACKED_FILES\'][4])', $content);
    }

    public function testComplexFile(): void
    {
        $files = [
            [
                'id' => 1,
                'path' => 'complex.php',
                'content' => '<?php
declare(strict_types=1);

namespace Complex\Example {
    use Some\External\Class as ExternalClass;
    use Another\{ClassA, ClassB};
    
    interface TestInterface {}
    
    trait TestTrait {
        public function traitMethod(): void {}
    }
    
    /**
     * Complex class example
     */
    abstract class AbstractBase implements TestInterface {
        use TestTrait;
        
        protected ExternalClass $external;
        
        public function __construct() {
            $this->external = new ExternalClass();
        }
    }
    
    final class ConcreteClass extends AbstractBase {
        public function method(): string {
            return "test";
        }
    }
}

namespace {
    function globalFunction(): void {
        echo "global";
    }
}',
                'is_entry' => true
            ]
        ];

        $this->dumper->dump($files, 'complex.php', $this->outputPath);

        $content = file_get_contents($this->outputPath);

        // Check complex structures are preserved
        $this->assertStringContainsString('namespace Complex\Example {', $content);
        $this->assertStringContainsString('interface TestInterface', $content);
        $this->assertStringContainsString('trait TestTrait', $content);
        $this->assertStringContainsString('abstract class AbstractBase', $content);
        $this->assertStringContainsString('final class ConcreteClass', $content);
        $this->assertStringContainsString('function globalFunction', $content);
    }

    public function testFilePermissions(): void
    {
        $files = [
            [
                'id' => 1,
                'path' => 'test.php',
                'content' => '<?php echo "test";',
                'is_entry' => true
            ]
        ];

        $this->dumper->dump($files, 'test.php', $this->outputPath);

        $this->assertFileExists($this->outputPath);

        // Check file is executable
        $perms = fileperms($this->outputPath);
        $this->assertTrue(($perms & 0111) !== 0, 'Output file should be executable');
    }

    public function testEmptyFilesList(): void
    {
        $this->expectException(\RuntimeException::class);
        $this->expectExceptionMessage('Entry file not found in packed files');

        $this->dumper->dump([], 'index.php', $this->outputPath);
    }

    public function testCreateOutputDirectory(): void
    {
        $nestedOutput = sys_get_temp_dir() . '/php-packer-test-' . uniqid() . '/deep/nested/output.php';

        $files = [
            [
                'id' => 1,
                'path' => 'test.php',
                'content' => '<?php echo "test";',
                'is_entry' => true
            ]
        ];

        $this->dumper->dump($files, 'test.php', $nestedOutput);

        $this->assertFileExists($nestedOutput);

        // Clean up
        $dir = dirname($nestedOutput);
        while ($dir !== sys_get_temp_dir() && is_dir($dir)) {
            rmdir($dir);
            $dir = dirname($dir);
        }
    }

    protected function setUp(): void
    {
        $this->dbPath = sys_get_temp_dir() . '/php-packer-test-' . uniqid() . '.db';
        $this->outputPath = sys_get_temp_dir() . '/php-packer-output-' . uniqid() . '.php';

        $this->logger = $this->createMock(LoggerInterface::class);
        $this->storage = new SqliteStorage($this->dbPath, $this->logger);
        $this->bootstrapGenerator = new BootstrapGenerator($this->storage, $this->logger);

        $this->dumper = new CodeDumper(
            $this->storage,
            $this->logger,
            $this->bootstrapGenerator
        );
    }

    protected function tearDown(): void
    {
        if (file_exists($this->dbPath)) {
            unlink($this->dbPath);
        }
        if (file_exists($this->outputPath)) {
            unlink($this->outputPath);
        }
    }
}
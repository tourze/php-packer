#!/usr/bin/env php
<?php

use Monolog\Formatter\LineFormatter;
use Monolog\Handler\StreamHandler;
use Monolog\Logger;
use PhpPacker\Adapter\ConfigurationAdapter;
use PhpPacker\Packer;
use Psr\Log\LoggerInterface;

// Autoloader
$autoloadPaths = [
    __DIR__ . '/../vendor/autoload.php',
    __DIR__ . '/../../../vendor/autoload.php',
    __DIR__ . '/../../../../vendor/autoload.php',
];

$autoloaderFound = false;
foreach ($autoloadPaths as $path) {
    if (file_exists($path)) {
        require_once $path;
        $autoloaderFound = true;
        break;
    }
}

if (!$autoloaderFound) {
    die("Autoloader not found. Please run 'composer install' first.\n");
}

ini_set('memory_limit', '2G');
date_default_timezone_set('asia/shanghai');

// 检查参数
if ($argc < 2) {
    echo "Usage: php pack.php <config_file>\n";
    exit(1);
}

function createLogger(): LoggerInterface
{
    $logger = new Logger('packer');

    // 添加控制台输出
    $stdoutHandler = new StreamHandler('php://stdout', Logger::DEBUG);
    $consoleFormatter = new LineFormatter(
        dateFormat: 'Y-m-d H:i:s',
        allowInlineLineBreaks: true
    );
    $stdoutHandler->setFormatter($consoleFormatter);
    $logger->pushHandler($stdoutHandler);
    
    // 添加文件日志
    $fileHandler = new StreamHandler(
        dirname(__DIR__) . '/var/log/packer.log',
        Logger::DEBUG
    );
    $fileFormatter = new LineFormatter(
        "[%datetime%] %channel%.%level_name%: %message% %context% %extra%\n",
        'Y-m-d H:i:s',
        true
    );
    $fileHandler->setFormatter($fileFormatter);
    $logger->pushHandler($fileHandler);

    return $logger;
}

$logger = createLogger();
$configFile = $argv[1];
$logger->info('Starting packer with config file: ' . $configFile);

// 创建配置对象
$config = new ConfigurationAdapter($configFile, $logger);

// 创建打包器并执行
$packer = new Packer($config, $logger);
$packer->pack();

$logger->info('Packing completed successfully');
